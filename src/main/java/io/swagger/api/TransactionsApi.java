/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import java.math.BigDecimal;
import io.swagger.model.NewTransactionDTO;
import io.swagger.model.TransactionDTO;
import io.swagger.model.TransactionDTOInner;
import io.swagger.model.TransactionResponseBody;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-05-15T15:18:25.887Z[GMT]")
@Validated
@CrossOrigin(origins = "*", allowedHeaders = "*")
public interface TransactionsApi {

    @Operation(summary = "get transactions", description = "This call provides transactions", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Transactions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TransactionDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad input parameter"),
        
        @ApiResponse(responseCode = "401", description = "Access token is missing or invalid"),
        
        @ApiResponse(responseCode = "403", description = "Access is denied"),
        
        @ApiResponse(responseCode = "404", description = "Object does not exist.") })
    @RequestMapping(value = "/transactions/{IBAN}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<TransactionDTOInner>> getTransactions(@Size(min=18,max=18) @Parameter(in = ParameterIn.PATH, description = "The IBAN", required=true, schema=@Schema()) @PathVariable("IBAN") String IBAN, @Parameter(in = ParameterIn.QUERY, description = "start date" ,schema=@Schema()) @Valid @RequestParam(value = "startDate", required = false) String startDate, @Parameter(in = ParameterIn.QUERY, description = "end date" ,schema=@Schema()) @Valid @RequestParam(value = "endDate", required = false) String endDate, @Size(min=18,max=18) @Parameter(in = ParameterIn.QUERY, description = "from IBAN" ,schema=@Schema()) @Valid @RequestParam(value = "fromIBAN", required = false) String fromIBAN, @Size(min=18,max=18) @Parameter(in = ParameterIn.QUERY, description = "to IBAN" ,schema=@Schema()) @Valid @RequestParam(value = "toIBAN", required = false) String toIBAN, @Parameter(in = ParameterIn.QUERY, description = "balance" ,schema=@Schema()) @Valid @RequestParam(value = "equalBalance", required = false) BigDecimal equalBalance, @Parameter(in = ParameterIn.QUERY, description = "more than specific balance" ,schema=@Schema()) @Valid @RequestParam(value = "moreBalance", required = false) BigDecimal moreBalance, @Parameter(in = ParameterIn.QUERY, description = "less than specific balance" ,schema=@Schema()) @Valid @RequestParam(value = "lessBalance", required = false) BigDecimal lessBalance);


    @Operation(summary = "transfer money", description = "This call tranfer money", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Transactions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "transaction completed", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TransactionResponseBody.class))),
        
        @ApiResponse(responseCode = "401", description = "Access token is missing or invalid"),
        
        @ApiResponse(responseCode = "403", description = "Access is denied") })
    @RequestMapping(value = "/transactions",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<TransactionResponseBody> transferMoney(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody NewTransactionDTO body);

}

